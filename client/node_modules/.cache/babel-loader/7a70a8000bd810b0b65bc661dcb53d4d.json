{"ast":null,"code":"/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nconst InputStream = require('./InputStream');\n\nconst fs = require(\"fs\");\n/**\n * Utility functions to create InputStreams from various sources.\n *\n * All returned InputStreams support the full range of Unicode\n * up to U+10FFFF (the default behavior of InputStream only supports\n * code points up to U+FFFF).\n */\n\n\nconst CharStreams = {\n  // Creates an InputStream from a string.\n  fromString: function (str) {\n    return new InputStream(str, true);\n  },\n\n  /**\n   * Asynchronously creates an InputStream from a blob given the\n   * encoding of the bytes in that blob (defaults to 'utf8' if\n   * encoding is null).\n   *\n   * Invokes onLoad(result) on success, onError(error) on\n   * failure.\n   */\n  fromBlob: function (blob, encoding, onLoad, onError) {\n    const reader = new window.FileReader();\n\n    reader.onload = function (e) {\n      const is = new InputStream(e.target.result, true);\n      onLoad(is);\n    };\n\n    reader.onerror = onError;\n    reader.readAsText(blob, encoding);\n  },\n\n  /**\n   * Creates an InputStream from a Buffer given the\n   * encoding of the bytes in that buffer (defaults to 'utf8' if\n   * encoding is null).\n   */\n  fromBuffer: function (buffer, encoding) {\n    return new InputStream(buffer.toString(encoding), true);\n  },\n\n  /** Asynchronously creates an InputStream from a file on disk given\n   * the encoding of the bytes in that file (defaults to 'utf8' if\n   * encoding is null).\n   *\n   * Invokes callback(error, result) on completion.\n   */\n  fromPath: function (path, encoding, callback) {\n    fs.readFile(path, encoding, function (err, data) {\n      let is = null;\n\n      if (data !== null) {\n        is = new InputStream(data, true);\n      }\n\n      callback(err, is);\n    });\n  },\n\n  /**\n   * Synchronously creates an InputStream given a path to a file\n   * on disk and the encoding of the bytes in that file (defaults to\n   * 'utf8' if encoding is null).\n   */\n  fromPathSync: function (path, encoding) {\n    const data = fs.readFileSync(path, encoding);\n    return new InputStream(data, true);\n  }\n};\nmodule.exports = CharStreams;","map":{"version":3,"sources":["/home/mario/Desktop/ChessLion/client/node_modules/antlr4/src/antlr4/CharStreams.js"],"names":["InputStream","require","fs","CharStreams","fromString","str","fromBlob","blob","encoding","onLoad","onError","reader","window","FileReader","onload","e","is","target","result","onerror","readAsText","fromBuffer","buffer","toString","fromPath","path","callback","readFile","err","data","fromPathSync","readFileSync","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,MAAMA,WAAW,GAAGC,OAAO,CAAC,eAAD,CAA3B;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAME,WAAW,GAAG;AAClB;AACAC,EAAAA,UAAU,EAAE,UAASC,GAAT,EAAc;AACxB,WAAO,IAAIL,WAAJ,CAAgBK,GAAhB,EAAqB,IAArB,CAAP;AACD,GAJiB;;AAMlB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,QAAQ,EAAE,UAASC,IAAT,EAAeC,QAAf,EAAyBC,MAAzB,EAAiCC,OAAjC,EAA0C;AAClD,UAAMC,MAAM,GAAG,IAAIC,MAAM,CAACC,UAAX,EAAf;;AACAF,IAAAA,MAAM,CAACG,MAAP,GAAgB,UAASC,CAAT,EAAY;AAC1B,YAAMC,EAAE,GAAG,IAAIhB,WAAJ,CAAgBe,CAAC,CAACE,MAAF,CAASC,MAAzB,EAAiC,IAAjC,CAAX;AACAT,MAAAA,MAAM,CAACO,EAAD,CAAN;AACD,KAHD;;AAIAL,IAAAA,MAAM,CAACQ,OAAP,GAAiBT,OAAjB;AACAC,IAAAA,MAAM,CAACS,UAAP,CAAkBb,IAAlB,EAAwBC,QAAxB;AACD,GAtBiB;;AAwBlB;AACF;AACA;AACA;AACA;AACEa,EAAAA,UAAU,EAAE,UAASC,MAAT,EAAiBd,QAAjB,EAA2B;AACrC,WAAO,IAAIR,WAAJ,CAAgBsB,MAAM,CAACC,QAAP,CAAgBf,QAAhB,CAAhB,EAA2C,IAA3C,CAAP;AACD,GA/BiB;;AAiClB;AACF;AACA;AACA;AACA;AACA;AACEgB,EAAAA,QAAQ,EAAE,UAASC,IAAT,EAAejB,QAAf,EAAyBkB,QAAzB,EAAmC;AAC3CxB,IAAAA,EAAE,CAACyB,QAAH,CAAYF,IAAZ,EAAkBjB,QAAlB,EAA4B,UAASoB,GAAT,EAAcC,IAAd,EAAoB;AAC9C,UAAIb,EAAE,GAAG,IAAT;;AACA,UAAIa,IAAI,KAAK,IAAb,EAAmB;AACjBb,QAAAA,EAAE,GAAG,IAAIhB,WAAJ,CAAgB6B,IAAhB,EAAsB,IAAtB,CAAL;AACD;;AACDH,MAAAA,QAAQ,CAACE,GAAD,EAAMZ,EAAN,CAAR;AACD,KAND;AAOD,GA/CiB;;AAiDlB;AACF;AACA;AACA;AACA;AACEc,EAAAA,YAAY,EAAE,UAASL,IAAT,EAAejB,QAAf,EAAyB;AACrC,UAAMqB,IAAI,GAAG3B,EAAE,CAAC6B,YAAH,CAAgBN,IAAhB,EAAsBjB,QAAtB,CAAb;AACA,WAAO,IAAIR,WAAJ,CAAgB6B,IAAhB,EAAsB,IAAtB,CAAP;AACD;AAzDiB,CAApB;AA4DAG,MAAM,CAACC,OAAP,GAAiB9B,WAAjB","sourcesContent":["/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst InputStream = require('./InputStream');\nconst fs = require(\"fs\");\n\n/**\n * Utility functions to create InputStreams from various sources.\n *\n * All returned InputStreams support the full range of Unicode\n * up to U+10FFFF (the default behavior of InputStream only supports\n * code points up to U+FFFF).\n */\nconst CharStreams = {\n  // Creates an InputStream from a string.\n  fromString: function(str) {\n    return new InputStream(str, true);\n  },\n\n  /**\n   * Asynchronously creates an InputStream from a blob given the\n   * encoding of the bytes in that blob (defaults to 'utf8' if\n   * encoding is null).\n   *\n   * Invokes onLoad(result) on success, onError(error) on\n   * failure.\n   */\n  fromBlob: function(blob, encoding, onLoad, onError) {\n    const reader = new window.FileReader();\n    reader.onload = function(e) {\n      const is = new InputStream(e.target.result, true);\n      onLoad(is);\n    };\n    reader.onerror = onError;\n    reader.readAsText(blob, encoding);\n  },\n\n  /**\n   * Creates an InputStream from a Buffer given the\n   * encoding of the bytes in that buffer (defaults to 'utf8' if\n   * encoding is null).\n   */\n  fromBuffer: function(buffer, encoding) {\n    return new InputStream(buffer.toString(encoding), true);\n  },\n\n  /** Asynchronously creates an InputStream from a file on disk given\n   * the encoding of the bytes in that file (defaults to 'utf8' if\n   * encoding is null).\n   *\n   * Invokes callback(error, result) on completion.\n   */\n  fromPath: function(path, encoding, callback) {\n    fs.readFile(path, encoding, function(err, data) {\n      let is = null;\n      if (data !== null) {\n        is = new InputStream(data, true);\n      }\n      callback(err, is);\n    });\n  },\n\n  /**\n   * Synchronously creates an InputStream given a path to a file\n   * on disk and the encoding of the bytes in that file (defaults to\n   * 'utf8' if encoding is null).\n   */\n  fromPathSync: function(path, encoding) {\n    const data = fs.readFileSync(path, encoding);\n    return new InputStream(data, true);\n  }\n};\n\nmodule.exports = CharStreams;\n"]},"metadata":{},"sourceType":"script"}