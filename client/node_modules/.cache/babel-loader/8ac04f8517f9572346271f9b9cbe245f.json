{"ast":null,"code":"/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n/**\n * Provides an empty default implementation of {@link ANTLRErrorListener}. The\n * default implementation of each method does nothing, but can be overridden as\n * necessary.\n */\nclass ErrorListener {\n  syntaxError(recognizer, offendingSymbol, line, column, msg, e) {}\n\n  reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {}\n\n  reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {}\n\n  reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs) {}\n\n}\n/**\n * {@inheritDoc}\n *\n * <p>\n * This implementation prints messages to {@link System//err} containing the\n * values of {@code line}, {@code charPositionInLine}, and {@code msg} using\n * the following format.</p>\n *\n * <pre>\n * line <em>line</em>:<em>charPositionInLine</em> <em>msg</em>\n * </pre>\n *\n */\n\n\nclass ConsoleErrorListener extends ErrorListener {\n  constructor() {\n    super();\n  }\n\n  syntaxError(recognizer, offendingSymbol, line, column, msg, e) {\n    console.error(\"line \" + line + \":\" + column + \" \" + msg);\n  }\n\n}\n/**\n * Provides a default instance of {@link ConsoleErrorListener}.\n */\n\n\nConsoleErrorListener.INSTANCE = new ConsoleErrorListener();\n\nclass ProxyErrorListener extends ErrorListener {\n  constructor(delegates) {\n    super();\n\n    if (delegates === null) {\n      throw \"delegates\";\n    }\n\n    this.delegates = delegates;\n    return this;\n  }\n\n  syntaxError(recognizer, offendingSymbol, line, column, msg, e) {\n    this.delegates.map(d => d.syntaxError(recognizer, offendingSymbol, line, column, msg, e));\n  }\n\n  reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {\n    this.delegates.map(d => d.reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs));\n  }\n\n  reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {\n    this.delegates.map(d => d.reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs));\n  }\n\n  reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs) {\n    this.delegates.map(d => d.reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs));\n  }\n\n}\n\nmodule.exports = {\n  ErrorListener,\n  ConsoleErrorListener,\n  ProxyErrorListener\n};","map":{"version":3,"sources":["/home/mario/Desktop/ChessLion/client/node_modules/antlr4/src/antlr4/error/ErrorListener.js"],"names":["ErrorListener","syntaxError","recognizer","offendingSymbol","line","column","msg","e","reportAmbiguity","dfa","startIndex","stopIndex","exact","ambigAlts","configs","reportAttemptingFullContext","conflictingAlts","reportContextSensitivity","prediction","ConsoleErrorListener","constructor","console","error","INSTANCE","ProxyErrorListener","delegates","map","d","module","exports"],"mappings":"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","sourcesContent":["/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n/**\n * Provides an empty default implementation of {@link ANTLRErrorListener}. The\n * default implementation of each method does nothing, but can be overridden as\n * necessary.\n */\nclass ErrorListener {\n    syntaxError(recognizer, offendingSymbol, line, column, msg, e) {\n    }\n\n    reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {\n    }\n\n    reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {\n    }\n\n    reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs) {\n    }\n}\n\n/**\n * {@inheritDoc}\n *\n * <p>\n * This implementation prints messages to {@link System//err} containing the\n * values of {@code line}, {@code charPositionInLine}, and {@code msg} using\n * the following format.</p>\n *\n * <pre>\n * line <em>line</em>:<em>charPositionInLine</em> <em>msg</em>\n * </pre>\n *\n */\nclass ConsoleErrorListener extends ErrorListener {\n    constructor() {\n        super();\n    }\n\n    syntaxError(recognizer, offendingSymbol, line, column, msg, e) {\n        console.error(\"line \" + line + \":\" + column + \" \" + msg);\n    }\n}\n\n\n/**\n * Provides a default instance of {@link ConsoleErrorListener}.\n */\nConsoleErrorListener.INSTANCE = new ConsoleErrorListener();\n\nclass ProxyErrorListener extends ErrorListener {\n    constructor(delegates) {\n        super();\n        if (delegates===null) {\n            throw \"delegates\";\n        }\n        this.delegates = delegates;\n        return this;\n    }\n\n    syntaxError(recognizer, offendingSymbol, line, column, msg, e) {\n        this.delegates.map(d => d.syntaxError(recognizer, offendingSymbol, line, column, msg, e));\n    }\n\n    reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {\n        this.delegates.map(d => d.reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs));\n    }\n\n    reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {\n        this.delegates.map(d => d.reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs));\n    }\n\n    reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs) {\n        this.delegates.map(d => d.reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs));\n    }\n}\n\nmodule.exports = {ErrorListener, ConsoleErrorListener, ProxyErrorListener}\n\n"]},"metadata":{},"sourceType":"script"}