{"ast":null,"code":"var _jsxFileName = \"/home/mario/Desktop/ChessLion/client/src/views/components/board/style.tsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/**\n * This function returns an object that represents the style of\n * the chess pieces. The object's keys represent a certain piece\n * (e.g. 'wN' = 'white Knight', 'bK' = 'black King') and the value\n * is a function that takes some optional arguments as parameters\n * and returns the JSX element that displays the given piece.\n * @param {PieceStyle} style The piece style\n * @returns An object that represents the pieces' style\n */\nexport function getPieceStyle(style) {\n  const f = () => /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 41\n  }, this);\n\n  let pieces = ['wP', 'wN', 'wB', 'wR', 'wQ', 'wK', 'bP', 'bN', 'bB', 'bR', 'bQ', 'bK'];\n  let obj = {\n    'wP': f,\n    'wN': f,\n    'wB': f,\n    'wR': f,\n    'wQ': f,\n    'wK': f,\n    'bP': f,\n    'bN': f,\n    'bB': f,\n    'bR': f,\n    'bQ': f,\n    'bK': f\n  };\n\n  for (let piece of pieces) {\n    let dir = process.env.PUBLIC_URL + '/chesspieces/' + style + '/' + piece + '.png';\n\n    obj[piece] = args => {\n      let size = args.squareWidth;\n      return /*#__PURE__*/_jsxDEV(\"img\", {\n        src: dir,\n        style: {\n          width: size,\n          height: size\n        },\n        alt: piece\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 20\n      }, this);\n    };\n  }\n\n  return obj;\n}","map":{"version":3,"sources":["/home/mario/Desktop/ChessLion/client/src/views/components/board/style.tsx"],"names":["getPieceStyle","style","f","pieces","obj","piece","dir","process","env","PUBLIC_URL","args","size","squareWidth","width","height"],"mappings":";;;AAiCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,aAAT,CAAuBC,KAAvB,EAAgE;AACnE,QAAMC,CAAqB,GAAG,mBAAM;AAAA;AAAA;AAAA;AAAA,UAApC;;AACA,MAAIC,MAAoB,GAAG,CACvB,IADuB,EACjB,IADiB,EACX,IADW,EACL,IADK,EACC,IADD,EACO,IADP,EAEvB,IAFuB,EAEjB,IAFiB,EAEX,IAFW,EAEL,IAFK,EAEC,IAFD,EAEO,IAFP,CAA3B;AAIA,MAAIC,GAAyB,GAAG;AAC5B,UAAMF,CADsB;AACnB,UAAMA,CADa;AACV,UAAMA,CADI;AACD,UAAMA,CADL;AACQ,UAAMA,CADd;AACiB,UAAMA,CADvB;AAE5B,UAAMA,CAFsB;AAEnB,UAAMA,CAFa;AAEV,UAAMA,CAFI;AAED,UAAMA,CAFL;AAEQ,UAAMA,CAFd;AAEiB,UAAMA;AAFvB,GAAhC;;AAIA,OAAK,IAAIG,KAAT,IAAkBF,MAAlB,EAA0B;AACtB,QAAIG,GAAG,GAAGC,OAAO,CAACC,GAAR,CAAYC,UAAZ,GAAyB,eAAzB,GAA2CR,KAA3C,GAAmD,GAAnD,GAAyDI,KAAzD,GAAiE,MAA3E;;AACAD,IAAAA,GAAG,CAACC,KAAD,CAAH,GAAcK,IAAD,IAAe;AACxB,UAAIC,IAAI,GAAGD,IAAI,CAACE,WAAhB;AACA,0BAAO;AAAK,QAAA,GAAG,EAAEN,GAAV;AAAe,QAAA,KAAK,EAAE;AAAEO,UAAAA,KAAK,EAAEF,IAAT;AAAeG,UAAAA,MAAM,EAAEH;AAAvB,SAAtB;AAAqD,QAAA,GAAG,EAAEN;AAA1D;AAAA;AAAA;AAAA;AAAA,cAAP;AACH,KAHD;AAIH;;AACD,SAAOD,GAAP;AACH","sourcesContent":["/**\n * This type designates a function that takes in some optional arguments and\n * returns a corresponding JSX element. The function belongs to a certain piece\n * on the chessboard. The returned element displays that piece.\n */\nexport type PieceStyleFunction = (args?: any) => JSX.Element;\n\n/**\n * This type represents all the available piece styles.\n */\nexport type PieceStyle =\n                    'alpha' | 'california' | 'cardinal' | 'cburnett' | 'chess7' | 'chessnut' |\n                    'classic' | 'companion' | 'dubrovny' | 'fantasy' | 'fresca' | 'gioco' |\n                    'governor' | 'horsey' | 'icpieces' | 'kosal' | 'leipzig' | 'letter' | 'libra' |\n                    'maestro' | 'merida' | 'pirouetti' | 'pixel' | 'reillycraig' | 'riohacha' |\n                    'shapes' | 'spatial' | 'staunty' | 'tatiana';\n\n/**\n * This type represents all possible pieces on the Chessboard.\n */\nexport type Piece =\n                'wP' | 'wN' | 'wB' | 'wR' | 'wQ' | 'wK' |\n                'bP' | 'bN' | 'bB' | 'bR' | 'bQ' | 'bK';\n\n/**\n * This interface defines the return type of the function 'getPieceStyle'.\n * A piece (as a string) is mapped to a function ('pieceStyleFunction') that\n * renders that piece. A whole set of pieces can be mapped with this.\n */\nexport type PieceStyleReturnType = {\n    [piece in Piece]: PieceStyleFunction;\n}\n\n/**\n * This function returns an object that represents the style of\n * the chess pieces. The object's keys represent a certain piece\n * (e.g. 'wN' = 'white Knight', 'bK' = 'black King') and the value\n * is a function that takes some optional arguments as parameters\n * and returns the JSX element that displays the given piece.\n * @param {PieceStyle} style The piece style\n * @returns An object that represents the pieces' style\n */\nexport function getPieceStyle(style: PieceStyle): PieceStyleReturnType {\n    const f: PieceStyleFunction = () => <span></span>;\n    let pieces: Array<Piece> = [\n        'wP', 'wN', 'wB', 'wR', 'wQ', 'wK',\n        'bP', 'bN', 'bB', 'bR', 'bQ', 'bK'\n    ];\n    let obj: PieceStyleReturnType = {\n        'wP': f, 'wN': f, 'wB': f, 'wR': f, 'wQ': f, 'wK': f,\n        'bP': f, 'bN': f, 'bB': f, 'bR': f, 'bQ': f, 'bK': f\n    };\n    for (let piece of pieces) {\n        let dir = process.env.PUBLIC_URL + '/chesspieces/' + style + '/' + piece + '.png';\n        obj[piece] = (args: any) => {\n            let size = args.squareWidth;\n            return <img src={dir} style={{ width: size, height: size }} alt={piece} />;\n        };\n    }\n    return obj;\n}\n"]},"metadata":{},"sourceType":"module"}