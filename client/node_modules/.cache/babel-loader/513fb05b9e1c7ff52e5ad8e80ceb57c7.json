{"ast":null,"code":"var _jsxFileName = \"/home/mario/Desktop/ChessLion/client/src/views/components/board/lionChessboard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Chessboard } from 'react-chessboard';\nimport Chess from 'chess.js';\nimport { getPieceStyle } from './style';\nimport MoveHistory from './history';\nimport Pgn from '../../../utils/pgn/pgnParser';\nimport './lionChessboard.scss';\n/**\n * This interface contains all the props for the 'LionChessboard' component.\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/**\n * This component displays a chessboard. For info about the props, refer to the\n * interface 'LionCHessboardProps'.\n * @param {LionChessboardProps} props The props for the chessboard\n * @returns The JSX that display the chessboard\n */\nconst LionChessboard = _ref => {\n  _s();\n\n  let {\n    legalMoves = true,\n    fen = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1',\n    pieceStyle = 'fresca',\n    showHistory = false,\n    showHistoryButtons = false,\n    pgn = undefined,\n    size = 500\n  } = _ref;\n  // @ts-ignore\n  const [game, setGame] = useState(Chess(fen));\n  const [fenHistory] = useState([]);\n  const [gamePgn, setGamePgn] = useState(new Pgn(pgn));\n  const [selectedMoveIndex, setSelectedMoveIndex] = useState(-1); // legal moves only\n\n  function onPieceDrop(square1, square2) {\n    let move = game.move({\n      from: square1,\n      to: square2,\n      promotion: 'q'\n    });\n\n    if (move !== null) {\n      fenHistory.push(game.fen());\n      setGame({ ...game\n      });\n      gamePgn.addMove({\n        move: move.san\n      });\n      setGamePgn({ ...gamePgn\n      });\n      setSelectedMoveIndex(selectedMoveIndex + 1);\n      return true;\n    } else {\n      return false;\n    }\n  } // gets the key of the currently selected move in the move history\n\n\n  function getSelectedMove() {\n    if (selectedMoveIndex % 2 === 0) {\n      return selectedMoveIndex / 2 + 1 + 'w';\n    } else {\n      return (selectedMoveIndex - 1) / 2 + 1 + 'b';\n    }\n  }\n\n  function selectMove(index) {\n    if (index >= 0 && index < gamePgn.moves.length) {\n      setSelectedMoveIndex(index); // @ts-ignore\n\n      setGame(Chess(fenHistory[index]));\n    }\n  } // selects next move in the move history\n\n\n  function selectNextMove() {\n    selectMove(selectedMoveIndex + 1);\n  } // selects previous move in the move history\n\n\n  function selectPreviousMove() {\n    selectMove(selectedMoveIndex - 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"hstack gap-3\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"vstack gap-2\",\n      style: {\n        width: size,\n        height: size\n      },\n      children: [/*#__PURE__*/_jsxDEV(Chessboard, {\n        onPieceDrop: legalMoves ? onPieceDrop : undefined,\n        position: game.fen(),\n        customPieces: getPieceStyle(pieceStyle),\n        customBoardStyle: {\n          borderRadius: '7px'\n        },\n        boardWidth: size,\n        animationDuration: 100\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), showHistoryButtons && /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"history-buttons-div\",\n        className: \"btn-group d-flex justify-content-between\",\n        role: \"group\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: selectPreviousMove,\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"bi bi-caret-left-fill\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: selectNextMove,\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"bi bi-caret-right-fill\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), showHistory && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: size * 0.65,\n        minHeight: size,\n        maxHeight: size,\n        overflowY: 'scroll',\n        overflowX: 'hidden'\n      },\n      children: /*#__PURE__*/_jsxDEV(MoveHistory, {\n        pgn: gamePgn,\n        selectedMoveKey: getSelectedMove(),\n        onMoveClicked: index => selectMove(index)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n};\n\n_s(LionChessboard, \"6fBZ8M5Svlnq4QOtZUaSw3CWYDQ=\");\n\n_c = LionChessboard;\nexport default LionChessboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"LionChessboard\");","map":{"version":3,"sources":["/home/mario/Desktop/ChessLion/client/src/views/components/board/lionChessboard.tsx"],"names":["React","useState","Chessboard","Chess","getPieceStyle","MoveHistory","Pgn","LionChessboard","legalMoves","fen","pieceStyle","showHistory","showHistoryButtons","pgn","undefined","size","game","setGame","fenHistory","gamePgn","setGamePgn","selectedMoveIndex","setSelectedMoveIndex","onPieceDrop","square1","square2","move","from","to","promotion","push","addMove","san","getSelectedMove","selectMove","index","moves","length","selectNextMove","selectPreviousMove","width","height","borderRadius","minHeight","maxHeight","overflowY","overflowX"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Chessboard } from 'react-chessboard';\nimport Chess, { Square } from 'chess.js';\nimport { getPieceStyle, PieceStyle } from './style';\nimport MoveHistory from './history';\nimport Pgn, { PgnObject } from '../../../utils/pgn/pgnParser';\nimport './lionChessboard.scss';\n\n\n/**\n * This interface contains all the props for the 'LionChessboard' component.\n */\ninterface LionChessboardProps {\n    /** The FEN position of the board */\n    fen?: string;\n    /** Whether only legal moves should be allowed */\n    legalMoves?: boolean;\n    /** The style of the pieces */\n    pieceStyle?: PieceStyle;\n    /** Whether to show the move history */\n    showHistory?: boolean;\n    /** Whether to show the 'next move' and 'previous move' buttons for the move history */\n    showHistoryButtons?: boolean;\n    /** An optional PGN game */\n    pgn?: string;\n    /** The size of the board in pixels */\n    size?: number;\n}\n\n/**\n * This component displays a chessboard. For info about the props, refer to the\n * interface 'LionCHessboardProps'.\n * @param {LionChessboardProps} props The props for the chessboard\n * @returns The JSX that display the chessboard\n */\nconst LionChessboard: React.FC<LionChessboardProps> = ({\n        legalMoves = true,\n        fen = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1',\n        pieceStyle = 'fresca',\n        showHistory = false,\n        showHistoryButtons = false,\n        pgn = undefined,\n        size = 500,\n    }: LionChessboardProps) => {\n\n    // @ts-ignore\n    const [game, setGame] = useState( Chess(fen) );\n    const [fenHistory, ] = useState< Array<string> >([]);\n    const [gamePgn, setGamePgn] = useState<Pgn>( new Pgn(pgn) )\n    const [selectedMoveIndex, setSelectedMoveIndex] = useState<number>(-1);\n\n    // legal moves only\n    function onPieceDrop(square1: Square, square2: Square): boolean {\n        let move = game.move({ from: square1, to: square2, promotion: 'q' });\n        if (move !== null) {\n            fenHistory.push(game.fen());\n            setGame({...game})\n            gamePgn.addMove({ move: move.san });\n            setGamePgn({...gamePgn})\n            setSelectedMoveIndex(selectedMoveIndex + 1);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    // gets the key of the currently selected move in the move history\n    function getSelectedMove(): string {\n        if (selectedMoveIndex % 2 === 0) {\n            return selectedMoveIndex / 2 + 1 + 'w';\n        } else {\n            return (selectedMoveIndex - 1) / 2 + 1 + 'b';\n        }\n    }\n\n    function selectMove(index: number): void {\n        if (index >= 0 && index < gamePgn.moves.length) {\n            setSelectedMoveIndex(index);\n            // @ts-ignore\n            setGame( Chess(fenHistory[index]) );\n        }\n    }\n\n    // selects next move in the move history\n    function selectNextMove(): void {\n        selectMove(selectedMoveIndex + 1);\n    }\n\n    // selects previous move in the move history\n    function selectPreviousMove(): void {\n        selectMove(selectedMoveIndex - 1);\n    }\n\n    return (\n        <div className=\"hstack gap-3\">\n            <div className=\"vstack gap-2\" style={{width: size, height: size}}>\n                <Chessboard\n                onPieceDrop={ legalMoves? onPieceDrop : undefined }\n                position={ game.fen() }\n                customPieces={ getPieceStyle(pieceStyle) }\n                customBoardStyle={{borderRadius: '7px'}}\n                boardWidth={size}\n                animationDuration={100}\n                />\n                {\n                    showHistoryButtons &&\n                    <div id=\"history-buttons-div\" className=\"btn-group d-flex justify-content-between\" role=\"group\">\n                        <button className=\"btn\" onClick={selectPreviousMove}>\n                            <i className=\"bi bi-caret-left-fill\"></i>\n                        </button>\n                        <button className=\"btn\" onClick={selectNextMove}>\n                            <i className=\"bi bi-caret-right-fill\"></i>\n                        </button>\n                    </div>\n                }\n            </div>\n            {\n                showHistory &&\n                <div style={{\n                    width: size * 0.65,\n                    minHeight: size,\n                    maxHeight: size,\n                    overflowY: 'scroll',\n                    overflowX: 'hidden',\n                }}>\n                    <MoveHistory\n                    pgn={gamePgn}\n                    selectedMoveKey={getSelectedMove()}\n                    onMoveClicked={index => selectMove(index)}\n                    />\n                </div>\n            }\n        </div>\n    );\n}\n\nexport default LionChessboard;\n"]},"metadata":{},"sourceType":"module"}