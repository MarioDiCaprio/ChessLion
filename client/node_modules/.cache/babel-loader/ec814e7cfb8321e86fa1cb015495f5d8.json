{"ast":null,"code":"var _jsxFileName = \"/home/mario/Desktop/ChessLion/client/src/views/components/board/lionChessboard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Chessboard } from 'react-chessboard';\nimport Chess from 'chess.js';\nimport { getPieceStyle } from './style';\nimport MoveHistory from './history';\nimport Pgn, { parsePgn } from '../../../utils/pgn/pgnParser';\nimport './lionChessboard.scss';\nimport LinearTable from '../../../utils/data/linearTable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ChessboardState {\n  // @ts-ignore\n  constructor(pgn, fen) {\n    this.table = new LinearTable(2);\n    this.selectedMove = [-1, 1];\n    this.game = void 0;\n\n    this.getPgn = () => {\n      return {\n        tags: {},\n        // @ts-ignore\n        moves: this.table.matrix.map(row => row.map(x => {\n          if (x !== null) return {\n            move: x.move,\n            glyph: undefined,\n            comment: undefined\n          };else return {\n            move: undefined,\n            glyph: undefined,\n            comment: undefined\n          };\n        }))\n      };\n    };\n\n    this.selectedFen = () => {\n      const [round, side] = this.selectedMove;\n      const cell = this.table.get(round, side);\n      return cell === null ? undefined : cell.fen;\n    };\n\n    this.getSelectedMoveKey = () => {\n      const [round, side] = this.selectedMove;\n      return round + 1 + (side === 0 ? 'w' : 'b');\n    };\n\n    this.selectMove = (round, side) => {\n      if (round > -1 && round < this.table.totalItems()) {\n        this.selectedMove = [round, side];\n        this.game.load(this.selectedFen());\n      }\n    };\n\n    this.selectNextMove = () => {\n      const [round, side] = this.selectedMove;\n      if (side === 0) this.selectMove(round, 1);else this.selectMove(round + 1, 0);\n    };\n\n    this.selectPrevMove = () => {\n      const [round, side] = this.selectedMove;\n      if (side === 1) this.selectMove(round, 0);else this.selectMove(round - 1, 1);\n    };\n\n    this.selectLastMove = () => {\n      // @ts-ignore\n      this.selectedMove = this.table.lastIndex();\n    };\n\n    this.addMoveUci = (square1, square2, promotion) => {\n      let move = this.game.move({\n        from: square1,\n        to: square2,\n        promotion: promotion\n      });\n\n      if (move !== null) {\n        this.table.push({\n          move: move.san,\n          fen: this.game.fen()\n        });\n        this.selectLastMove();\n        console.log(this.getPgn());\n        return true;\n      }\n\n      return false;\n    };\n\n    // @ts-ignore\n    this.game = Chess(fen);\n    if (typeof pgn === 'string') pgn = parsePgn(pgn);\n\n    if (pgn !== undefined) {\n      for (let move of pgn.moves) {\n        for (let m of move) {\n          let tmp = this.game.move(m.move);\n\n          if (tmp !== null) {\n            this.table.push({\n              move: m,\n              fen: this.game.fen()\n            });\n          }\n        }\n      }\n    }\n  }\n\n}\n/**\n * This interface contains all the props for the 'LionChessboard' component.\n */\n\n\n/**\n * This component displays a chessboard. For info about the props, refer to the\n * interface 'LionCHessboardProps'.\n * @param {LionChessboardProps} props The props for the chessboard\n * @returns The JSX that display the chessboard\n */\nconst LionChessboard = _ref => {\n  _s();\n\n  let {\n    legalMoves = true,\n    fen = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1',\n    pieceStyle = 'fresca',\n    showHistory = false,\n    showHistoryButtons = false,\n    pgn = undefined,\n    size = 500\n  } = _ref;\n  const [state, setState] = useState(new ChessboardState(pgn, fen)); // legal moves only\n\n  function onPieceDrop(square1, square2) {\n    const tmp = state.addMoveUci(square1, square2, 'q');\n\n    if (tmp) {\n      setState({ ...state\n      });\n      return true;\n    }\n\n    return false;\n  }\n\n  function doAndUpdate(f) {\n    f();\n    setState({ ...state\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"hstack gap-3\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"vstack gap-2\",\n      style: {\n        width: size,\n        height: size\n      },\n      children: [/*#__PURE__*/_jsxDEV(Chessboard, {\n        onPieceDrop: legalMoves ? onPieceDrop : undefined,\n        position: state.selectedFen(),\n        customPieces: getPieceStyle(pieceStyle),\n        customBoardStyle: {\n          borderRadius: '7px'\n        },\n        boardWidth: size,\n        animationDuration: 100\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this), showHistoryButtons && /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"history-buttons-div\",\n        className: \"btn-group d-flex justify-content-between\",\n        role: \"group\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: () => doAndUpdate(() => state.selectNextMove()),\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"bi bi-caret-left-fill\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: () => doAndUpdate(() => state.selectPrevMove()),\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"bi bi-caret-right-fill\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }, this), showHistory && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: size * 0.65,\n        minHeight: size,\n        maxHeight: size,\n        overflowY: 'scroll',\n        overflowX: 'hidden'\n      },\n      children: /*#__PURE__*/_jsxDEV(MoveHistory, {\n        pgn: new Pgn(state.getPgn()),\n        selectedMoveKey: state.getSelectedMoveKey(),\n        onMoveClicked: (round, side) => doAndUpdate(() => state.selectMove(round, side))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 9\n  }, this);\n};\n\n_s(LionChessboard, \"rILQCBiZcwNv3Qwv/u0N6IVfetc=\");\n\n_c = LionChessboard;\nexport default LionChessboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"LionChessboard\");","map":{"version":3,"sources":["/home/mario/Desktop/ChessLion/client/src/views/components/board/lionChessboard.tsx"],"names":["React","useState","Chessboard","Chess","getPieceStyle","MoveHistory","Pgn","parsePgn","LinearTable","ChessboardState","constructor","pgn","fen","table","selectedMove","game","getPgn","tags","moves","matrix","map","row","x","move","glyph","undefined","comment","selectedFen","round","side","cell","get","getSelectedMoveKey","selectMove","totalItems","load","selectNextMove","selectPrevMove","selectLastMove","lastIndex","addMoveUci","square1","square2","promotion","from","to","push","san","console","log","m","tmp","LionChessboard","legalMoves","pieceStyle","showHistory","showHistoryButtons","size","state","setState","onPieceDrop","doAndUpdate","f","width","height","borderRadius","minHeight","maxHeight","overflowY","overflowX"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Chessboard } from 'react-chessboard';\nimport Chess, { Square } from 'chess.js';\nimport { getPieceStyle, PieceStyle } from './style';\nimport MoveHistory from './history';\nimport Pgn, { Move, parsePgn, PgnObject } from '../../../utils/pgn/pgnParser';\nimport './lionChessboard.scss';\nimport LinearTable from '../../../utils/data/linearTable';\n\n\nclass ChessboardState {\n    table: LinearTable<{ move: Move, fen: string }> = new LinearTable(2);\n    selectedMove: [number, 0 | 1] = [-1, 1];\n    // @ts-ignore\n    game!: Chess;\n\n    constructor(pgn?: PgnObject | string, fen?: string) {\n        // @ts-ignore\n        this.game = Chess(fen);\n        if (typeof pgn === 'string')\n            pgn = parsePgn(pgn);\n        if (pgn !== undefined) {\n            for (let move of pgn.moves) {\n                for (let m of move) {\n                    let tmp = this.game.move(m.move);\n                    if (tmp !== null) {\n                        this.table.push({ move: m, fen: this.game.fen() });\n                    }\n                }\n            }\n        }\n    }\n\n    getPgn = (): PgnObject => {\n        return {\n            tags: {},\n            // @ts-ignore\n            moves: this.table.matrix.map(row => row.map(x => {\n                if (x !== null)\n                    return { move: x.move, glyph: undefined, comment: undefined };\n                else\n                    return { move: undefined, glyph: undefined, comment: undefined };\n            }))\n        };\n    }\n\n    selectedFen = (): string | undefined => {\n        const [round, side] = this.selectedMove;\n        const cell =  this.table.get(round, side);\n        return (cell === null)? undefined : cell.fen;\n    }\n\n    getSelectedMoveKey = (): string => {\n        const [round, side] = this.selectedMove;\n        return (round + 1) + (side===0? 'w' : 'b');\n    }\n\n    selectMove = (round: number, side: 0 | 1): void => {\n        if (round > -1 && round < this.table.totalItems()) {\n            this.selectedMove = [round, side];\n            this.game.load( this.selectedFen() );\n        }\n    }\n\n    selectNextMove = (): void => {\n        const [round, side] = this.selectedMove;\n        if (side === 0)\n            this.selectMove(round, 1);\n        else\n            this.selectMove(round + 1, 0);\n    }\n\n    selectPrevMove = (): void => {\n        const [round, side] = this.selectedMove;\n        if (side === 1)\n            this.selectMove(round, 0);\n        else\n            this.selectMove(round - 1, 1);\n    }\n\n    selectLastMove = (): void => {\n        // @ts-ignore\n        this.selectedMove = this.table.lastIndex();\n    }\n\n    addMoveUci = (square1: string, square2: string, promotion: string): boolean => {\n        let move = this.game.move({ from: square1, to: square2, promotion: promotion });\n        if (move !== null) {\n            this.table.push({ move: move.san, fen: this.game.fen() });\n            this.selectLastMove();\n            console.log(this.getPgn());\n            return true;\n        }\n        return false;\n    }\n}\n\n/**\n * This interface contains all the props for the 'LionChessboard' component.\n */\nexport interface LionChessboardProps {\n    /** The FEN position of the board */\n    fen?: string;\n    /** Whether only legal moves should be allowed */\n    legalMoves?: boolean;\n    /** The style of the pieces */\n    pieceStyle?: PieceStyle;\n    /** Whether to show the move history */\n    showHistory?: boolean;\n    /** Whether to show the 'next move' and 'previous move' buttons for the move history */\n    showHistoryButtons?: boolean;\n    /** An optional PGN game */\n    pgn?: string;\n    /** The size of the board in pixels */\n    size?: number;\n}\n\n/**\n * This component displays a chessboard. For info about the props, refer to the\n * interface 'LionCHessboardProps'.\n * @param {LionChessboardProps} props The props for the chessboard\n * @returns The JSX that display the chessboard\n */\nconst LionChessboard: React.FC<LionChessboardProps> = ({\n        legalMoves = true,\n        fen = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1',\n        pieceStyle = 'fresca',\n        showHistory = false,\n        showHistoryButtons = false,\n        pgn = undefined,\n        size = 500,\n    }: LionChessboardProps) => {\n\n    const [state, setState] = useState<ChessboardState>( new ChessboardState(pgn, fen) )\n\n    // legal moves only\n    function onPieceDrop(square1: Square, square2: Square): boolean {\n        const tmp = state.addMoveUci(square1, square2, 'q');\n        if (tmp) {\n            setState({...state});\n            return true;\n        }\n        return false;\n    }\n\n    function doAndUpdate(f: () => any): any {\n        f();\n        setState({...state});\n    }\n\n    return (\n        <div className=\"hstack gap-3\">\n            <div className=\"vstack gap-2\" style={{width: size, height: size}}>\n                <Chessboard\n                onPieceDrop={ legalMoves? onPieceDrop : undefined }\n                position={ state.selectedFen() }\n                customPieces={ getPieceStyle(pieceStyle) }\n                customBoardStyle={{borderRadius: '7px'}}\n                boardWidth={size}\n                animationDuration={100}\n                />\n                {\n                    showHistoryButtons &&\n                    <div id=\"history-buttons-div\" className=\"btn-group d-flex justify-content-between\" role=\"group\">\n                        <button className=\"btn\" onClick={() => doAndUpdate( () => state.selectNextMove() )}>\n                            <i className=\"bi bi-caret-left-fill\"></i>\n                        </button>\n                        <button className=\"btn\" onClick={() => doAndUpdate( () => state.selectPrevMove() )}>\n                            <i className=\"bi bi-caret-right-fill\"></i>\n                        </button>\n                    </div>\n                }\n            </div>\n            {\n                showHistory &&\n                <div style={{\n                    width: size * 0.65,\n                    minHeight: size,\n                    maxHeight: size,\n                    overflowY: 'scroll',\n                    overflowX: 'hidden',\n                }}>\n                    <MoveHistory\n                    pgn={ new Pgn( state.getPgn() ) }\n                    selectedMoveKey={state.getSelectedMoveKey()}\n                    onMoveClicked={(round, side) => doAndUpdate( () => state.selectMove(round, side) )}\n                    />\n                </div>\n            }\n        </div>\n    );\n}\n\nexport default LionChessboard;\n"]},"metadata":{},"sourceType":"module"}