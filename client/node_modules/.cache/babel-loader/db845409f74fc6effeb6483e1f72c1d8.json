{"ast":null,"code":"var _jsxFileName = \"/home/mario/Desktop/ChessLion/client/src/views/components/board/history.tsx\";\nimport Pgn from '../../../utils/pgn/pgnParser';\n/**\n * This interface contains all the props of the component 'MoveHistory'.\n * It may have a starting history ('history'), the key for the currently\n * selected move ('selectedMoveKey'), which is made of the turn and the color\n * of the player (e.g. '2w' means 'move 2, white's move') and a function that\n * is triggered each time the move at a certain index has been clicked\n * ('onMoveClicked').\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/**\n * This component displays the move history for a game of chess. It is displayed\n * in form of a table. For an explanation of the props, refer to the interface\n * 'MoveHistoryProps'.\n * @param {MoveHistoryProps} props The props for this component\n * @returns The JSX element that displays the given data\n */\nconst MoveHistory = _ref => {\n  let {\n    pgn = new Pgn(),\n    selectedMoveKey = undefined,\n    onMoveClicked = undefined\n  } = _ref;\n  // move colors based on glyphs\n  const glyphColor = {\n    '?': 'rgb(235, 207, 0)',\n    '??': 'rgb(255, 79, 56)',\n    '!?': 'rgb(45, 187, 252)'\n  }; // complete history\n\n  const history = []; // one turn (temp variable)\n\n  let round = [];\n  let roundNum = 1; // populate history with corresponding JSX\n\n  for (let i = 0; i < pgn.moves.length; i++) {\n    for (let j = 0; j < 2; j++) {\n      let move = pgn.moves[i][j];\n      let color = 'rgb(100, 100, 100)';\n      let border = 'transparent';\n      let text;\n      let key = j === 0 ? roundNum + 'w' : roundNum + 'b';\n      console.log(key + ': ' + move.move); // break if move is undefined (only the case when white's move was the last one in the game)\n\n      if (move.move === undefined) {\n        break;\n      } // select color based on glyph\n\n\n      if (move.glyph !== undefined && move.glyph in glyphColor) {\n        text = move + move.glyph;\n        color = glyphColor[move.glyph];\n      } else {\n        text = move.move;\n      } // select additional border if this move is selected\n\n\n      if (selectedMoveKey === key) {\n        border = color;\n      } // triggered when this move gets clicked\n\n\n      const moveClicked = () => {\n        if (onMoveClicked !== undefined) {\n          onMoveClicked(i);\n        }\n      }; // add JSX to temp variable\n\n\n      round.push( /*#__PURE__*/_jsxDEV(\"td\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          style: {\n            color: color,\n            borderColor: border\n          },\n          onClick: moveClicked,\n          children: text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this)\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this));\n    } // add temp variable to table, rinse and repeat\n\n\n    history.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"th\", {\n        scope: \"row\",\n        children: roundNum++\n      }, roundNum + 'w', false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), round]\n    }, roundNum, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this));\n    round = [];\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    id: \"history-table\",\n    className: \"table table-borderless table-bordered\",\n    style: {\n      maxHeight: 'inherit'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          scope: \"col\",\n          children: \"#\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          scope: \"col\",\n          children: \"White\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          scope: \"col\",\n          children: \"Black\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: history\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 9\n  }, this);\n};\n\n_c = MoveHistory;\nexport default MoveHistory;\n\nvar _c;\n\n$RefreshReg$(_c, \"MoveHistory\");","map":{"version":3,"sources":["/home/mario/Desktop/ChessLion/client/src/views/components/board/history.tsx"],"names":["Pgn","MoveHistory","pgn","selectedMoveKey","undefined","onMoveClicked","glyphColor","history","round","roundNum","i","moves","length","j","move","color","border","text","key","console","log","glyph","moveClicked","push","borderColor","maxHeight"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,8BAAhB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAuC,GAAG,QAIxB;AAAA,MAJyB;AAC7CC,IAAAA,GAAG,GAAG,IAAIF,GAAJ,EADuC;AAE7CG,IAAAA,eAAe,GAAGC,SAF2B;AAG7CC,IAAAA,aAAa,GAAGD;AAH6B,GAIzB;AAEpB;AACA,QAAME,UAAqC,GAAG;AAC1C,SAAK,kBADqC;AAE1C,UAAM,kBAFoC;AAG1C,UAAM;AAHoC,GAA9C,CAHoB,CASpB;;AACA,QAAMC,OAA2B,GAAG,EAApC,CAVoB,CAWpB;;AACA,MAAIC,KAAyB,GAAG,EAAhC;AACA,MAAIC,QAAgB,GAAG,CAAvB,CAboB,CAepB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,GAAG,CAACS,KAAJ,CAAUC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AACvC,SAAK,IAAIG,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,CAAhB,EAAmBA,CAAC,EAApB,EAAwB;AACpB,UAAIC,IAAI,GAAGZ,GAAG,CAACS,KAAJ,CAAUD,CAAV,EAAaG,CAAb,CAAX;AACA,UAAIE,KAAa,GAAG,oBAApB;AACA,UAAIC,MAAc,GAAG,aAArB;AACA,UAAIC,IAAJ;AACA,UAAIC,GAAW,GAAIL,CAAC,KAAK,CAAP,GAAYJ,QAAQ,GAAG,GAAvB,GAA6BA,QAAQ,GAAG,GAA1D;AACAU,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,GAAG,IAAN,GAAaJ,IAAI,CAACA,IAA9B,EANoB,CAQpB;;AACA,UAAIA,IAAI,CAACA,IAAL,KAAcV,SAAlB,EAA6B;AACzB;AACH,OAXmB,CAYpB;;;AACA,UAAIU,IAAI,CAACO,KAAL,KAAejB,SAAf,IAA4BU,IAAI,CAACO,KAAL,IAAcf,UAA9C,EAA0D;AACtDW,QAAAA,IAAI,GAAGH,IAAI,GAAGA,IAAI,CAACO,KAAnB;AACAN,QAAAA,KAAK,GAAGT,UAAU,CAACQ,IAAI,CAACO,KAAN,CAAlB;AACH,OAHD,MAGO;AACHJ,QAAAA,IAAI,GAAGH,IAAI,CAACA,IAAZ;AACH,OAlBmB,CAoBpB;;;AACA,UAAIX,eAAe,KAAKe,GAAxB,EAA6B;AACzBF,QAAAA,MAAM,GAAGD,KAAT;AACH,OAvBmB,CAyBpB;;;AACA,YAAMO,WAAW,GAAG,MAAM;AACtB,YAAIjB,aAAa,KAAKD,SAAtB,EAAiC;AAC7BC,UAAAA,aAAa,CAACK,CAAD,CAAb;AACH;AACJ,OAJD,CA1BoB,CAgCpB;;;AACAF,MAAAA,KAAK,CAACe,IAAN,eACI;AAAA,+BACI;AAAQ,UAAA,SAAS,EAAC,KAAlB;AAAwB,UAAA,KAAK,EAAE;AAAER,YAAAA,KAAK,EAAEA,KAAT;AAAgBS,YAAAA,WAAW,EAAER;AAA7B,WAA/B;AAAsE,UAAA,OAAO,EAAEM,WAA/E;AAAA,oBACKL;AADL;AAAA;AAAA;AAAA;AAAA;AADJ,SAASC,GAAT;AAAA;AAAA;AAAA;AAAA,cADJ;AAOH,KAzCsC,CA2CvC;;;AACAX,IAAAA,OAAO,CAACgB,IAAR,eACI;AAAA,8BACI;AAAyB,QAAA,KAAK,EAAC,KAA/B;AAAA,kBAAsCd,QAAQ;AAA9C,SAASA,QAAQ,GAAG,GAApB;AAAA;AAAA;AAAA;AAAA,cADJ,EAEKD,KAFL;AAAA,OAASC,QAAT;AAAA;AAAA;AAAA;AAAA,YADJ;AAMAD,IAAAA,KAAK,GAAG,EAAR;AACH;;AAED,sBACI;AAAO,IAAA,EAAE,EAAC,eAAV;AAA0B,IAAA,SAAS,EAAC,uCAApC;AAA4E,IAAA,KAAK,EAAE;AAAEiB,MAAAA,SAAS,EAAE;AAAb,KAAnF;AAAA,4BACI;AAAA,6BACI;AAAA,gCACI;AAAI,UAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAI,UAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAI,UAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,eAQI;AAAA,gBACKlB;AADL;AAAA;AAAA;AAAA;AAAA,YARJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH,CAvFD;;KAAMN,W;AA0FN,eAAeA,WAAf","sourcesContent":["import Pgn from '../../../utils/pgn/pgnParser';\n\n/**\n * This interface contains all the props of the component 'MoveHistory'.\n * It may have a starting history ('history'), the key for the currently\n * selected move ('selectedMoveKey'), which is made of the turn and the color\n * of the player (e.g. '2w' means 'move 2, white's move') and a function that\n * is triggered each time the move at a certain index has been clicked\n * ('onMoveClicked').\n */\nexport interface MoveHistoryProps {\n    /** The array containing all moves (e.g. ['e4', 'e5', { move: 'Nf3', glyph: '?!' }, 'Nf6']) */\n    pgn?: Pgn;\n    /** An optional key of the selected move (e.g. '2w') */\n    selectedMoveKey?: string;\n    /**\n     * An optional function that is triggered when the move at the selected index\n     * in the history is clicked (e.g. index => console.log(history[index]))\n    */\n    onMoveClicked?: (index: number) => void;\n}\n\n/**\n * This component displays the move history for a game of chess. It is displayed\n * in form of a table. For an explanation of the props, refer to the interface\n * 'MoveHistoryProps'.\n * @param {MoveHistoryProps} props The props for this component\n * @returns The JSX element that displays the given data\n */\nconst MoveHistory: React.FC<MoveHistoryProps> = ({\n    pgn = new Pgn(),\n    selectedMoveKey = undefined,\n    onMoveClicked = undefined,\n}: MoveHistoryProps) => {\n\n    // move colors based on glyphs\n    const glyphColor: { [key: string]: string } = {\n        '?': 'rgb(235, 207, 0)',\n        '??': 'rgb(255, 79, 56)',\n        '!?': 'rgb(45, 187, 252)',\n    }\n\n    // complete history\n    const history: Array<JSX.Element> = [];\n    // one turn (temp variable)\n    let round: Array<JSX.Element> = [];\n    let roundNum: number = 1;\n\n    // populate history with corresponding JSX\n    for (let i = 0; i < pgn.moves.length; i++) {\n        for (let j=0; j<2; j++) {\n            let move = pgn.moves[i][j];\n            let color: string = 'rgb(100, 100, 100)';\n            let border: string = 'transparent';\n            let text: string;\n            let key: string = (j === 0) ? roundNum + 'w' : roundNum + 'b';\n            console.log(key + ': ' + move.move);\n\n            // break if move is undefined (only the case when white's move was the last one in the game)\n            if (move.move === undefined) {\n                break;\n            }\n            // select color based on glyph\n            if (move.glyph !== undefined && move.glyph in glyphColor) {\n                text = move + move.glyph;\n                color = glyphColor[move.glyph];\n            } else {\n                text = move.move;\n            }\n\n            // select additional border if this move is selected\n            if (selectedMoveKey === key) {\n                border = color;\n            }\n\n            // triggered when this move gets clicked\n            const moveClicked = () => {\n                if (onMoveClicked !== undefined) {\n                    onMoveClicked(i);\n                }\n            }\n\n            // add JSX to temp variable\n            round.push(\n                <td key={key}>\n                    <button className=\"btn\" style={{ color: color, borderColor: border }} onClick={moveClicked}>\n                        {text}\n                    </button>\n                </td>\n            );\n        }\n\n        // add temp variable to table, rinse and repeat\n        history.push(\n            <tr key={roundNum}>\n                <th key={roundNum + 'w'} scope=\"row\">{roundNum++}</th>\n                {round}\n            </tr>\n        );\n        round = [];\n    }\n\n    return (\n        <table id=\"history-table\" className=\"table table-borderless table-bordered\" style={{ maxHeight: 'inherit' }}>\n            <thead>\n                <tr>\n                    <th scope=\"col\">#</th>\n                    <th scope=\"col\">White</th>\n                    <th scope=\"col\">Black</th>\n                </tr>\n            </thead>\n            <tbody>\n                {history}\n            </tbody>\n        </table>\n    );\n}\n\n\nexport default MoveHistory;\n"]},"metadata":{},"sourceType":"module"}