{"ast":null,"code":"/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nconst CommonToken = require('./Token').CommonToken;\n\nclass TokenFactory {}\n/**\n * This default implementation of {@link TokenFactory} creates\n * {@link CommonToken} objects.\n */\n\n\nclass CommonTokenFactory extends TokenFactory {\n  constructor(copyText) {\n    super();\n    /**\n     * Indicates whether {@link CommonToken//setText} should be called after\n     * constructing tokens to explicitly set the text. This is useful for cases\n     * where the input stream might not be able to provide arbitrary substrings\n     * of text from the input after the lexer creates a token (e.g. the\n     * implementation of {@link CharStream//getText} in\n     * {@link UnbufferedCharStream} throws an\n     * {@link UnsupportedOperationException}). Explicitly setting the token text\n     * allows {@link Token//getText} to be called at any time regardless of the\n     * input stream implementation.\n     *\n     * <p>\n     * The default value is {@code false} to avoid the performance and memory\n     * overhead of copying text for every token unless explicitly requested.</p>\n     */\n\n    this.copyText = copyText === undefined ? false : copyText;\n  }\n\n  create(source, type, text, channel, start, stop, line, column) {\n    const t = new CommonToken(source, type, channel, start, stop);\n    t.line = line;\n    t.column = column;\n\n    if (text !== null) {\n      t.text = text;\n    } else if (this.copyText && source[1] !== null) {\n      t.text = source[1].getText(start, stop);\n    }\n\n    return t;\n  }\n\n  createThin(type, text) {\n    const t = new CommonToken(null, type);\n    t.text = text;\n    return t;\n  }\n\n}\n/**\n * The default {@link CommonTokenFactory} instance.\n *\n * <p>\n * This token factory does not explicitly copy token text when constructing\n * tokens.</p>\n */\n\n\nCommonTokenFactory.DEFAULT = new CommonTokenFactory();\nmodule.exports = CommonTokenFactory;","map":{"version":3,"sources":["/home/mario/Desktop/ChessLion/client/node_modules/antlr4/src/antlr4/CommonTokenFactory.js"],"names":["CommonToken","require","TokenFactory","CommonTokenFactory","constructor","copyText","undefined","create","source","type","text","channel","start","stop","line","column","t","getText","createThin","DEFAULT","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,MAAMA,WAAW,GAAGC,OAAO,CAAC,SAAD,CAAP,CAAmBD,WAAvC;;AAEA,MAAME,YAAN,CAAmB;AAEnB;AACA;AACA;AACA;;;AACA,MAAMC,kBAAN,SAAiCD,YAAjC,CAA8C;AAC1CE,EAAAA,WAAW,CAACC,QAAD,EAAW;AAClB;AACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACQ,SAAKA,QAAL,GAAgBA,QAAQ,KAAGC,SAAX,GAAuB,KAAvB,GAA+BD,QAA/C;AACH;;AAEDE,EAAAA,MAAM,CAACC,MAAD,EAASC,IAAT,EAAeC,IAAf,EAAqBC,OAArB,EAA8BC,KAA9B,EAAqCC,IAArC,EAA2CC,IAA3C,EAAiDC,MAAjD,EAAyD;AAC3D,UAAMC,CAAC,GAAG,IAAIhB,WAAJ,CAAgBQ,MAAhB,EAAwBC,IAAxB,EAA8BE,OAA9B,EAAuCC,KAAvC,EAA8CC,IAA9C,CAAV;AACAG,IAAAA,CAAC,CAACF,IAAF,GAASA,IAAT;AACAE,IAAAA,CAAC,CAACD,MAAF,GAAWA,MAAX;;AACA,QAAIL,IAAI,KAAI,IAAZ,EAAkB;AACdM,MAAAA,CAAC,CAACN,IAAF,GAASA,IAAT;AACH,KAFD,MAEO,IAAI,KAAKL,QAAL,IAAiBG,MAAM,CAAC,CAAD,CAAN,KAAa,IAAlC,EAAwC;AAC3CQ,MAAAA,CAAC,CAACN,IAAF,GAASF,MAAM,CAAC,CAAD,CAAN,CAAUS,OAAV,CAAkBL,KAAlB,EAAwBC,IAAxB,CAAT;AACH;;AACD,WAAOG,CAAP;AACH;;AAEDE,EAAAA,UAAU,CAACT,IAAD,EAAOC,IAAP,EAAa;AACnB,UAAMM,CAAC,GAAG,IAAIhB,WAAJ,CAAgB,IAAhB,EAAsBS,IAAtB,CAAV;AACAO,IAAAA,CAAC,CAACN,IAAF,GAASA,IAAT;AACA,WAAOM,CAAP;AACH;;AArCyC;AAwC9C;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAb,kBAAkB,CAACgB,OAAnB,GAA6B,IAAIhB,kBAAJ,EAA7B;AAEAiB,MAAM,CAACC,OAAP,GAAiBlB,kBAAjB","sourcesContent":["/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst CommonToken = require('./Token').CommonToken;\n\nclass TokenFactory {}\n\n/**\n * This default implementation of {@link TokenFactory} creates\n * {@link CommonToken} objects.\n */\nclass CommonTokenFactory extends TokenFactory {\n    constructor(copyText) {\n        super();\n        /**\n         * Indicates whether {@link CommonToken//setText} should be called after\n         * constructing tokens to explicitly set the text. This is useful for cases\n         * where the input stream might not be able to provide arbitrary substrings\n         * of text from the input after the lexer creates a token (e.g. the\n         * implementation of {@link CharStream//getText} in\n         * {@link UnbufferedCharStream} throws an\n         * {@link UnsupportedOperationException}). Explicitly setting the token text\n         * allows {@link Token//getText} to be called at any time regardless of the\n         * input stream implementation.\n         *\n         * <p>\n         * The default value is {@code false} to avoid the performance and memory\n         * overhead of copying text for every token unless explicitly requested.</p>\n         */\n        this.copyText = copyText===undefined ? false : copyText;\n    }\n\n    create(source, type, text, channel, start, stop, line, column) {\n        const t = new CommonToken(source, type, channel, start, stop);\n        t.line = line;\n        t.column = column;\n        if (text !==null) {\n            t.text = text;\n        } else if (this.copyText && source[1] !==null) {\n            t.text = source[1].getText(start,stop);\n        }\n        return t;\n    }\n\n    createThin(type, text) {\n        const t = new CommonToken(null, type);\n        t.text = text;\n        return t;\n    }\n}\n\n/**\n * The default {@link CommonTokenFactory} instance.\n *\n * <p>\n * This token factory does not explicitly copy token text when constructing\n * tokens.</p>\n */\nCommonTokenFactory.DEFAULT = new CommonTokenFactory();\n\nmodule.exports = CommonTokenFactory;\n"]},"metadata":{},"sourceType":"script"}