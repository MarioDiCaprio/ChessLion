{"ast":null,"code":"/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nfunction valueToString(v) {\n  return v === null ? \"null\" : v;\n}\n\nfunction arrayToString(a) {\n  return Array.isArray(a) ? \"[\" + a.map(valueToString).join(\", \") + \"]\" : \"null\";\n}\n\nString.prototype.seed = String.prototype.seed || Math.round(Math.random() * Math.pow(2, 32));\n\nString.prototype.hashCode = function () {\n  const key = this.toString();\n  let h1b, k1;\n  const remainder = key.length & 3; // key.length % 4\n\n  const bytes = key.length - remainder;\n  let h1 = String.prototype.seed;\n  const c1 = 0xcc9e2d51;\n  const c2 = 0x1b873593;\n  let i = 0;\n\n  while (i < bytes) {\n    k1 = key.charCodeAt(i) & 0xff | (key.charCodeAt(++i) & 0xff) << 8 | (key.charCodeAt(++i) & 0xff) << 16 | (key.charCodeAt(++i) & 0xff) << 24;\n    ++i;\n    k1 = (k1 & 0xffff) * c1 + (((k1 >>> 16) * c1 & 0xffff) << 16) & 0xffffffff;\n    k1 = k1 << 15 | k1 >>> 17;\n    k1 = (k1 & 0xffff) * c2 + (((k1 >>> 16) * c2 & 0xffff) << 16) & 0xffffffff;\n    h1 ^= k1;\n    h1 = h1 << 13 | h1 >>> 19;\n    h1b = (h1 & 0xffff) * 5 + (((h1 >>> 16) * 5 & 0xffff) << 16) & 0xffffffff;\n    h1 = (h1b & 0xffff) + 0x6b64 + (((h1b >>> 16) + 0xe654 & 0xffff) << 16);\n  }\n\n  k1 = 0;\n\n  switch (remainder) {\n    case 3:\n      k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;\n\n    case 2:\n      k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;\n\n    case 1:\n      k1 ^= key.charCodeAt(i) & 0xff;\n      k1 = (k1 & 0xffff) * c1 + (((k1 >>> 16) * c1 & 0xffff) << 16) & 0xffffffff;\n      k1 = k1 << 15 | k1 >>> 17;\n      k1 = (k1 & 0xffff) * c2 + (((k1 >>> 16) * c2 & 0xffff) << 16) & 0xffffffff;\n      h1 ^= k1;\n  }\n\n  h1 ^= key.length;\n  h1 ^= h1 >>> 16;\n  h1 = (h1 & 0xffff) * 0x85ebca6b + (((h1 >>> 16) * 0x85ebca6b & 0xffff) << 16) & 0xffffffff;\n  h1 ^= h1 >>> 13;\n  h1 = (h1 & 0xffff) * 0xc2b2ae35 + (((h1 >>> 16) * 0xc2b2ae35 & 0xffff) << 16) & 0xffffffff;\n  h1 ^= h1 >>> 16;\n  return h1 >>> 0;\n};\n\nfunction standardEqualsFunction(a, b) {\n  return a ? a.equals(b) : a == b;\n}\n\nfunction standardHashCodeFunction(a) {\n  return a ? a.hashCode() : -1;\n}\n\nclass Set {\n  constructor(hashFunction, equalsFunction) {\n    this.data = {};\n    this.hashFunction = hashFunction || standardHashCodeFunction;\n    this.equalsFunction = equalsFunction || standardEqualsFunction;\n  }\n\n  add(value) {\n    const hash = this.hashFunction(value);\n    const key = \"hash_\" + hash;\n\n    if (key in this.data) {\n      const values = this.data[key];\n\n      for (let i = 0; i < values.length; i++) {\n        if (this.equalsFunction(value, values[i])) {\n          return values[i];\n        }\n      }\n\n      values.push(value);\n      return value;\n    } else {\n      this.data[key] = [value];\n      return value;\n    }\n  }\n\n  contains(value) {\n    return this.get(value) != null;\n  }\n\n  get(value) {\n    const hash = this.hashFunction(value);\n    const key = \"hash_\" + hash;\n\n    if (key in this.data) {\n      const values = this.data[key];\n\n      for (let i = 0; i < values.length; i++) {\n        if (this.equalsFunction(value, values[i])) {\n          return values[i];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  values() {\n    let l = [];\n\n    for (const key in this.data) {\n      if (key.indexOf(\"hash_\") === 0) {\n        l = l.concat(this.data[key]);\n      }\n    }\n\n    return l;\n  }\n\n  toString() {\n    return arrayToString(this.values());\n  }\n\n  get length() {\n    let l = 0;\n\n    for (const key in this.data) {\n      if (key.indexOf(\"hash_\") === 0) {\n        l = l + this.data[key].length;\n      }\n    }\n\n    return l;\n  }\n\n}\n\nclass BitSet {\n  constructor() {\n    this.data = [];\n  }\n\n  add(value) {\n    this.data[value] = true;\n  }\n\n  or(set) {\n    const bits = this;\n    Object.keys(set.data).map(function (alt) {\n      bits.add(alt);\n    });\n  }\n\n  remove(value) {\n    delete this.data[value];\n  }\n\n  contains(value) {\n    return this.data[value] === true;\n  }\n\n  values() {\n    return Object.keys(this.data);\n  }\n\n  minValue() {\n    return Math.min.apply(null, this.values());\n  }\n\n  hashCode() {\n    const hash = new Hash();\n    hash.update(this.values());\n    return hash.finish();\n  }\n\n  equals(other) {\n    if (!(other instanceof BitSet)) {\n      return false;\n    }\n\n    return this.hashCode() === other.hashCode();\n  }\n\n  toString() {\n    return \"{\" + this.values().join(\", \") + \"}\";\n  }\n\n  get length() {\n    return this.values().length;\n  }\n\n}\n\nclass Map {\n  constructor(hashFunction, equalsFunction) {\n    this.data = {};\n    this.hashFunction = hashFunction || standardHashCodeFunction;\n    this.equalsFunction = equalsFunction || standardEqualsFunction;\n  }\n\n  put(key, value) {\n    const hashKey = \"hash_\" + this.hashFunction(key);\n\n    if (hashKey in this.data) {\n      const entries = this.data[hashKey];\n\n      for (let i = 0; i < entries.length; i++) {\n        const entry = entries[i];\n\n        if (this.equalsFunction(key, entry.key)) {\n          const oldValue = entry.value;\n          entry.value = value;\n          return oldValue;\n        }\n      }\n\n      entries.push({\n        key: key,\n        value: value\n      });\n      return value;\n    } else {\n      this.data[hashKey] = [{\n        key: key,\n        value: value\n      }];\n      return value;\n    }\n  }\n\n  containsKey(key) {\n    const hashKey = \"hash_\" + this.hashFunction(key);\n\n    if (hashKey in this.data) {\n      const entries = this.data[hashKey];\n\n      for (let i = 0; i < entries.length; i++) {\n        const entry = entries[i];\n        if (this.equalsFunction(key, entry.key)) return true;\n      }\n    }\n\n    return false;\n  }\n\n  get(key) {\n    const hashKey = \"hash_\" + this.hashFunction(key);\n\n    if (hashKey in this.data) {\n      const entries = this.data[hashKey];\n\n      for (let i = 0; i < entries.length; i++) {\n        const entry = entries[i];\n        if (this.equalsFunction(key, entry.key)) return entry.value;\n      }\n    }\n\n    return null;\n  }\n\n  entries() {\n    let l = [];\n\n    for (const key in this.data) {\n      if (key.indexOf(\"hash_\") === 0) {\n        l = l.concat(this.data[key]);\n      }\n    }\n\n    return l;\n  }\n\n  getKeys() {\n    return this.entries().map(function (e) {\n      return e.key;\n    });\n  }\n\n  getValues() {\n    return this.entries().map(function (e) {\n      return e.value;\n    });\n  }\n\n  toString() {\n    const ss = this.entries().map(function (entry) {\n      return '{' + entry.key + ':' + entry.value + '}';\n    });\n    return '[' + ss.join(\", \") + ']';\n  }\n\n  get length() {\n    let l = 0;\n\n    for (const hashKey in this.data) {\n      if (hashKey.indexOf(\"hash_\") === 0) {\n        l = l + this.data[hashKey].length;\n      }\n    }\n\n    return l;\n  }\n\n}\n\nclass AltDict {\n  constructor() {\n    this.data = {};\n  }\n\n  get(key) {\n    key = \"k-\" + key;\n\n    if (key in this.data) {\n      return this.data[key];\n    } else {\n      return null;\n    }\n  }\n\n  put(key, value) {\n    key = \"k-\" + key;\n    this.data[key] = value;\n  }\n\n  values() {\n    const data = this.data;\n    const keys = Object.keys(this.data);\n    return keys.map(function (key) {\n      return data[key];\n    });\n  }\n\n}\n\nclass DoubleDict {\n  constructor(defaultMapCtor) {\n    this.defaultMapCtor = defaultMapCtor || Map;\n    this.cacheMap = new this.defaultMapCtor();\n  }\n\n  get(a, b) {\n    const d = this.cacheMap.get(a) || null;\n    return d === null ? null : d.get(b) || null;\n  }\n\n  set(a, b, o) {\n    let d = this.cacheMap.get(a) || null;\n\n    if (d === null) {\n      d = new this.defaultMapCtor();\n      this.cacheMap.put(a, d);\n    }\n\n    d.put(b, o);\n  }\n\n}\n\nclass Hash {\n  constructor() {\n    this.count = 0;\n    this.hash = 0;\n  }\n\n  update() {\n    for (let i = 0; i < arguments.length; i++) {\n      const value = arguments[i];\n      if (value == null) continue;\n      if (Array.isArray(value)) this.update.apply(this, value);else {\n        let k = 0;\n\n        switch (typeof value) {\n          case 'undefined':\n          case 'function':\n            continue;\n\n          case 'number':\n          case 'boolean':\n            k = value;\n            break;\n\n          case 'string':\n            k = value.hashCode();\n            break;\n\n          default:\n            if (value.updateHashCode) value.updateHashCode(this);else console.log(\"No updateHashCode for \" + value.toString());\n            continue;\n        }\n\n        k = k * 0xCC9E2D51;\n        k = k << 15 | k >>> 32 - 15;\n        k = k * 0x1B873593;\n        this.count = this.count + 1;\n        let hash = this.hash ^ k;\n        hash = hash << 13 | hash >>> 32 - 13;\n        hash = hash * 5 + 0xE6546B64;\n        this.hash = hash;\n      }\n    }\n  }\n\n  finish() {\n    let hash = this.hash ^ this.count * 4;\n    hash = hash ^ hash >>> 16;\n    hash = hash * 0x85EBCA6B;\n    hash = hash ^ hash >>> 13;\n    hash = hash * 0xC2B2AE35;\n    hash = hash ^ hash >>> 16;\n    return hash;\n  }\n\n}\n\nfunction hashStuff() {\n  const hash = new Hash();\n  hash.update.apply(hash, arguments);\n  return hash.finish();\n}\n\nfunction escapeWhitespace(s, escapeSpaces) {\n  s = s.replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\");\n\n  if (escapeSpaces) {\n    s = s.replace(/ /g, \"\\u00B7\");\n  }\n\n  return s;\n}\n\nfunction titleCase(str) {\n  return str.replace(/\\w\\S*/g, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1);\n  });\n}\n\nfunction equalArrays(a, b) {\n  if (!Array.isArray(a) || !Array.isArray(b)) return false;\n  if (a === b) return true;\n  if (a.length !== b.length) return false;\n\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i]) continue;\n    if (!a[i].equals || !a[i].equals(b[i])) return false;\n  }\n\n  return true;\n}\n\nmodule.exports = {\n  Hash,\n  Set,\n  Map,\n  BitSet,\n  AltDict,\n  DoubleDict,\n  hashStuff,\n  escapeWhitespace,\n  arrayToString,\n  titleCase,\n  equalArrays\n};","map":{"version":3,"sources":["/home/mario/Desktop/ChessLion/client/node_modules/antlr4/src/antlr4/Utils.js"],"names":["valueToString","v","arrayToString","a","Array","isArray","map","join","String","prototype","seed","Math","round","random","pow","hashCode","key","toString","h1b","k1","remainder","length","bytes","h1","c1","c2","i","charCodeAt","standardEqualsFunction","b","equals","standardHashCodeFunction","Set","constructor","hashFunction","equalsFunction","data","add","value","hash","values","push","contains","get","l","indexOf","concat","BitSet","or","set","bits","Object","keys","alt","remove","minValue","min","apply","Hash","update","finish","other","Map","put","hashKey","entries","entry","oldValue","containsKey","getKeys","e","getValues","ss","AltDict","DoubleDict","defaultMapCtor","cacheMap","d","o","count","arguments","k","updateHashCode","console","log","hashStuff","escapeWhitespace","s","escapeSpaces","replace","titleCase","str","txt","charAt","toUpperCase","substr","equalArrays","module","exports"],"mappings":"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","sourcesContent":["/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nfunction valueToString(v) {\n    return v === null ? \"null\" : v;\n}\n\nfunction arrayToString(a) {\n    return Array.isArray(a) ? (\"[\" + a.map(valueToString).join(\", \") + \"]\") : \"null\";\n}\n\nString.prototype.seed = String.prototype.seed || Math.round(Math.random() * Math.pow(2, 32));\n\nString.prototype.hashCode = function () {\n    const key = this.toString();\n    let h1b, k1;\n\n    const remainder = key.length & 3; // key.length % 4\n    const bytes = key.length - remainder;\n    let h1 = String.prototype.seed;\n    const c1 = 0xcc9e2d51;\n    const c2 = 0x1b873593;\n    let i = 0;\n\n    while (i < bytes) {\n        k1 =\n            ((key.charCodeAt(i) & 0xff)) |\n            ((key.charCodeAt(++i) & 0xff) << 8) |\n            ((key.charCodeAt(++i) & 0xff) << 16) |\n            ((key.charCodeAt(++i) & 0xff) << 24);\n        ++i;\n\n        k1 = ((((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16))) & 0xffffffff;\n        k1 = (k1 << 15) | (k1 >>> 17);\n        k1 = ((((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16))) & 0xffffffff;\n\n        h1 ^= k1;\n        h1 = (h1 << 13) | (h1 >>> 19);\n        h1b = ((((h1 & 0xffff) * 5) + ((((h1 >>> 16) * 5) & 0xffff) << 16))) & 0xffffffff;\n        h1 = (((h1b & 0xffff) + 0x6b64) + ((((h1b >>> 16) + 0xe654) & 0xffff) << 16));\n    }\n\n    k1 = 0;\n\n    switch (remainder) {\n        case 3:\n            k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;\n        case 2:\n            k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;\n        case 1:\n            k1 ^= (key.charCodeAt(i) & 0xff);\n\n            k1 = (((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16)) & 0xffffffff;\n            k1 = (k1 << 15) | (k1 >>> 17);\n            k1 = (((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16)) & 0xffffffff;\n            h1 ^= k1;\n    }\n\n    h1 ^= key.length;\n\n    h1 ^= h1 >>> 16;\n    h1 = (((h1 & 0xffff) * 0x85ebca6b) + ((((h1 >>> 16) * 0x85ebca6b) & 0xffff) << 16)) & 0xffffffff;\n    h1 ^= h1 >>> 13;\n    h1 = ((((h1 & 0xffff) * 0xc2b2ae35) + ((((h1 >>> 16) * 0xc2b2ae35) & 0xffff) << 16))) & 0xffffffff;\n    h1 ^= h1 >>> 16;\n\n    return h1 >>> 0;\n};\n\nfunction standardEqualsFunction(a, b) {\n    return a ? a.equals(b) : a==b;\n}\n\nfunction standardHashCodeFunction(a) {\n    return a ? a.hashCode() : -1;\n}\n\nclass Set {\n    constructor(hashFunction, equalsFunction) {\n        this.data = {};\n        this.hashFunction = hashFunction || standardHashCodeFunction;\n        this.equalsFunction = equalsFunction || standardEqualsFunction;\n    }\n\n    add(value) {\n        const hash = this.hashFunction(value);\n        const key = \"hash_\" + hash;\n        if (key in this.data) {\n            const values = this.data[key];\n            for (let i = 0; i < values.length; i++) {\n                if (this.equalsFunction(value, values[i])) {\n                    return values[i];\n                }\n            }\n            values.push(value);\n            return value;\n        } else {\n            this.data[key] = [value];\n            return value;\n        }\n    }\n\n    contains(value) {\n        return this.get(value) != null;\n    }\n\n    get(value) {\n        const hash = this.hashFunction(value);\n        const key = \"hash_\" + hash;\n        if (key in this.data) {\n            const values = this.data[key];\n            for (let i = 0; i < values.length; i++) {\n                if (this.equalsFunction(value, values[i])) {\n                    return values[i];\n                }\n            }\n        }\n        return null;\n    }\n\n    values() {\n        let l = [];\n        for (const key in this.data) {\n            if (key.indexOf(\"hash_\") === 0) {\n                l = l.concat(this.data[key]);\n            }\n        }\n        return l;\n    }\n\n    toString() {\n        return arrayToString(this.values());\n    }\n\n    get length(){\n        let l = 0;\n        for (const key in this.data) {\n            if (key.indexOf(\"hash_\") === 0) {\n                l = l + this.data[key].length;\n            }\n        }\n        return l;\n    }\n}\n\n\nclass BitSet {\n    constructor() {\n        this.data = [];\n    }\n\n    add(value) {\n        this.data[value] = true;\n    }\n\n    or(set) {\n        const bits = this;\n        Object.keys(set.data).map(function (alt) {\n            bits.add(alt);\n        });\n    }\n\n    remove(value) {\n        delete this.data[value];\n    }\n\n    contains(value) {\n        return this.data[value] === true;\n    }\n\n    values() {\n        return Object.keys(this.data);\n    }\n\n    minValue() {\n        return Math.min.apply(null, this.values());\n    }\n\n    hashCode() {\n        const hash = new Hash();\n        hash.update(this.values());\n        return hash.finish();\n    }\n\n    equals(other) {\n        if (!(other instanceof BitSet)) {\n            return false;\n        }\n        return this.hashCode() === other.hashCode();\n    }\n\n    toString() {\n        return \"{\" + this.values().join(\", \") + \"}\";\n    }\n\n    get length(){\n        return this.values().length;\n    }\n}\n\n\nclass Map {\n    constructor(hashFunction, equalsFunction) {\n        this.data = {};\n        this.hashFunction = hashFunction || standardHashCodeFunction;\n        this.equalsFunction = equalsFunction || standardEqualsFunction;\n    }\n\n    put(key, value) {\n        const hashKey = \"hash_\" + this.hashFunction(key);\n        if (hashKey in this.data) {\n            const entries = this.data[hashKey];\n            for (let i = 0; i < entries.length; i++) {\n                const entry = entries[i];\n                if (this.equalsFunction(key, entry.key)) {\n                    const oldValue = entry.value;\n                    entry.value = value;\n                    return oldValue;\n                }\n            }\n            entries.push({key:key, value:value});\n            return value;\n        } else {\n            this.data[hashKey] = [{key:key, value:value}];\n            return value;\n        }\n    }\n\n    containsKey(key) {\n        const hashKey = \"hash_\" + this.hashFunction(key);\n        if(hashKey in this.data) {\n            const entries = this.data[hashKey];\n            for (let i = 0; i < entries.length; i++) {\n                const entry = entries[i];\n                if (this.equalsFunction(key, entry.key))\n                    return true;\n            }\n        }\n        return false;\n    }\n\n    get(key) {\n        const hashKey = \"hash_\" + this.hashFunction(key);\n        if(hashKey in this.data) {\n            const entries = this.data[hashKey];\n            for (let i = 0; i < entries.length; i++) {\n                const entry = entries[i];\n                if (this.equalsFunction(key, entry.key))\n                    return entry.value;\n            }\n        }\n        return null;\n    }\n\n    entries() {\n        let l = [];\n        for (const key in this.data) {\n            if (key.indexOf(\"hash_\") === 0) {\n                l = l.concat(this.data[key]);\n            }\n        }\n        return l;\n    }\n\n    getKeys() {\n        return this.entries().map(function(e) {\n            return e.key;\n        });\n    }\n\n    getValues() {\n        return this.entries().map(function(e) {\n                return e.value;\n        });\n    }\n\n    toString() {\n        const ss = this.entries().map(function(entry) {\n            return '{' + entry.key + ':' + entry.value + '}';\n        });\n        return '[' + ss.join(\", \") + ']';\n    }\n\n    get length(){\n        let l = 0;\n        for (const hashKey in this.data) {\n            if (hashKey.indexOf(\"hash_\") === 0) {\n                l = l + this.data[hashKey].length;\n            }\n        }\n        return l;\n    }\n}\n\n\nclass AltDict {\n    constructor() {\n        this.data = {};\n    }\n\n    get(key) {\n        key = \"k-\" + key;\n        if (key in this.data) {\n            return this.data[key];\n        } else {\n            return null;\n        }\n    }\n\n    put(key, value) {\n        key = \"k-\" + key;\n        this.data[key] = value;\n    }\n\n    values() {\n        const data = this.data;\n        const keys = Object.keys(this.data);\n        return keys.map(function (key) {\n            return data[key];\n        });\n    }\n}\n\n\nclass DoubleDict {\n    constructor(defaultMapCtor) {\n        this.defaultMapCtor = defaultMapCtor || Map;\n        this.cacheMap = new this.defaultMapCtor();\n    }\n\n    get(a, b) {\n        const d = this.cacheMap.get(a) || null;\n        return d === null ? null : (d.get(b) || null);\n    }\n\n    set(a, b, o) {\n        let d = this.cacheMap.get(a) || null;\n        if (d === null) {\n            d = new this.defaultMapCtor();\n            this.cacheMap.put(a, d);\n        }\n        d.put(b, o);\n    }\n}\n\nclass Hash {\n    constructor() {\n        this.count = 0;\n        this.hash = 0;\n    }\n\n    update() {\n        for(let i=0;i<arguments.length;i++) {\n            const value = arguments[i];\n            if (value == null)\n                continue;\n            if(Array.isArray(value))\n                this.update.apply(this, value);\n            else {\n                let k = 0;\n                switch (typeof(value)) {\n                    case 'undefined':\n                    case 'function':\n                        continue;\n                    case 'number':\n                    case 'boolean':\n                        k = value;\n                        break;\n                    case 'string':\n                        k = value.hashCode();\n                        break;\n                    default:\n                        if(value.updateHashCode)\n                            value.updateHashCode(this);\n                        else\n                            console.log(\"No updateHashCode for \" + value.toString())\n                        continue;\n                }\n                k = k * 0xCC9E2D51;\n                k = (k << 15) | (k >>> (32 - 15));\n                k = k * 0x1B873593;\n                this.count = this.count + 1;\n                let hash = this.hash ^ k;\n                hash = (hash << 13) | (hash >>> (32 - 13));\n                hash = hash * 5 + 0xE6546B64;\n                this.hash = hash;\n            }\n        }\n    }\n\n    finish() {\n        let hash = this.hash ^ (this.count * 4);\n        hash = hash ^ (hash >>> 16);\n        hash = hash * 0x85EBCA6B;\n        hash = hash ^ (hash >>> 13);\n        hash = hash * 0xC2B2AE35;\n        hash = hash ^ (hash >>> 16);\n        return hash;\n    }\n}\n\nfunction hashStuff() {\n    const hash = new Hash();\n    hash.update.apply(hash, arguments);\n    return hash.finish();\n}\n\n\nfunction escapeWhitespace(s, escapeSpaces) {\n    s = s.replace(/\\t/g, \"\\\\t\")\n         .replace(/\\n/g, \"\\\\n\")\n         .replace(/\\r/g, \"\\\\r\");\n    if (escapeSpaces) {\n        s = s.replace(/ /g, \"\\u00B7\");\n    }\n    return s;\n}\n\nfunction titleCase(str) {\n    return str.replace(/\\w\\S*/g, function (txt) {\n        return txt.charAt(0).toUpperCase() + txt.substr(1);\n    });\n}\n\nfunction equalArrays(a, b) {\n    if (!Array.isArray(a) || !Array.isArray(b))\n        return false;\n    if (a === b)\n        return true;\n    if (a.length !== b.length)\n        return false;\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] === b[i])\n            continue;\n        if (!a[i].equals || !a[i].equals(b[i]))\n            return false;\n    }\n    return true;\n}\n\nmodule.exports = {\n    Hash,\n    Set,\n    Map,\n    BitSet,\n    AltDict,\n    DoubleDict,\n    hashStuff,\n    escapeWhitespace,\n    arrayToString,\n    titleCase,\n    equalArrays\n}\n"]},"metadata":{},"sourceType":"script"}