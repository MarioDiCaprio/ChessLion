{"ast":null,"code":"var _jsxFileName = \"/home/mario/Desktop/ChessLion/client/src/views/components/board/history.tsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/**\n * This component displays the move history for a game of chess. It is displayed\n * in form of a table. For an explanation of the props, refer to the interface\n * 'MoveHistoryProps'.\n * @param props The props for this component\n * @returns The JSX element that displays the given data\n */\nconst MoveHistory = props => {\n  // complete history\n  const history = []; // one turn (temp variable)\n\n  let round = [];\n  let roundNum = 1; // populate history with corresponding JSX\n\n  for (let i = 0; i < props.history.length; i++) {\n    let moveObj = props.history[i];\n    let color = 'rgb(100, 100, 100)';\n    let border = 'transparent';\n    let text;\n    let key = i % 2 === 0 ? roundNum + 'w' : roundNum + 'b';\n\n    if (typeof moveObj === 'string') {\n      text = moveObj;\n    } else {\n      let {\n        move,\n        glyph\n      } = moveObj; // break if move is undefined (only the case when white's move was the last one in the game)\n\n      if (move === undefined) break; // select color based on glyph\n\n      if (glyph !== undefined) {\n        text = move + glyph;\n        color = glyph === '?' ? 'rgb(235, 207, 0)' : glyph === '??' ? 'rgb(255, 79, 56)' : glyph === '?!' ? 'rgb(45, 187, 252)' : color;\n      } else {\n        text = move;\n      }\n    } // select additional border if this move is selected\n\n\n    if (props.selectedMoveKey === key) {\n      border = color;\n    } // triggered when this move gets clicked\n\n\n    const moveClicked = () => {\n      if (props.onMoveClicked !== undefined) {\n        props.onMoveClicked(i);\n      }\n    };\n\n    round.push( /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        style: {\n          color: color,\n          borderColor: border\n        },\n        onClick: moveClicked,\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this)); // end of round\n\n    if (i !== 0 && i % 2 === 1) {\n      history.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          scope: \"row\",\n          children: roundNum++\n        }, roundNum + 'w', false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this), round]\n      }, roundNum, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this));\n      round = [];\n    }\n  }\n\n  if (round.length > 0) {\n    history.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"th\", {\n        scope: \"row\",\n        children: roundNum\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this), round, /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this)]\n    }, roundNum, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    id: \"history-table\",\n    className: \"table table-borderless table-bordered\",\n    style: {\n      maxHeight: 'inherit'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          scope: \"col\",\n          children: \"#\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          scope: \"col\",\n          children: \"White\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          scope: \"col\",\n          children: \"Black\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: history\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 9\n  }, this);\n};\n\n_c = MoveHistory;\nexport default MoveHistory;\n\nvar _c;\n\n$RefreshReg$(_c, \"MoveHistory\");","map":{"version":3,"sources":["/home/mario/Desktop/ChessLion/client/src/views/components/board/history.tsx"],"names":["MoveHistory","props","history","round","roundNum","i","length","moveObj","color","border","text","key","move","glyph","undefined","selectedMoveKey","moveClicked","onMoveClicked","push","borderColor","maxHeight"],"mappings":"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","sourcesContent":["import { Move } from '../../../utils/pgn/pgnParser';\n\n/**\n * This interface contains all the props of the component 'MoveHistory'.\n * It may have a starting history ('history'), the key for the currently\n * selected move ('selectedMoveKey'), which is made of the turn and the color\n * of the player (e.g. '2w' means 'move 2, white's move') and a function that\n * is triggered each time the move at a certain index has been clicked\n * ('onMoveClicked').\n */\nexport interface MoveHistoryProps {\n    /** The array containing all moves (e.g. ['e4', 'e5', { move: 'Nf3', glyph: '?!' }, 'Nf6']) */\n    history: Array<Move>;\n    /** An optional key of the selected move (e.g. '2w') */\n    selectedMoveKey?: string;\n    /**\n     * An optional function that is triggered when the move at the selected index\n     * in the history is clicked (e.g. index => console.log(history[index]))\n    */\n    onMoveClicked?: (index: number) => void;\n}\n\n/**\n * This component displays the move history for a game of chess. It is displayed\n * in form of a table. For an explanation of the props, refer to the interface\n * 'MoveHistoryProps'.\n * @param props The props for this component\n * @returns The JSX element that displays the given data\n */\nconst MoveHistory: React.FC<MoveHistoryProps> = props => {\n    // complete history\n    const history: Array<JSX.Element> = [];\n    // one turn (temp variable)\n    let round: Array<JSX.Element> = [];\n    let roundNum: number = 1;\n\n    // populate history with corresponding JSX\n    for (let i = 0; i < props.history.length; i++) {\n        let moveObj = props.history[i];\n        let color: string = 'rgb(100, 100, 100)';\n        let border: string = 'transparent';\n        let text: string;\n        let key: string = (i % 2 === 0) ? roundNum + 'w' : roundNum + 'b';\n\n        \n        if (typeof moveObj === 'string') {\n            text = moveObj;\n        } else {\n            let { move, glyph } = moveObj;\n            // break if move is undefined (only the case when white's move was the last one in the game)\n            if (move === undefined)\n                break;\n            // select color based on glyph\n            if (glyph !== undefined) {\n                text = move + glyph;\n                color =\n                    (glyph === '?') ? 'rgb(235, 207, 0)' :\n                        (glyph === '??') ? 'rgb(255, 79, 56)' :\n                            (glyph === '?!') ? 'rgb(45, 187, 252)' :\n                                color;\n            } else {\n                text = move;\n            }\n        }\n\n        // select additional border if this move is selected\n        if (props.selectedMoveKey === key) {\n            border = color;\n        }\n\n        // triggered when this move gets clicked\n        const moveClicked = () => {\n            if (props.onMoveClicked !== undefined) {\n                props.onMoveClicked(i);\n            }\n        }\n\n        round.push(\n            <td key={key}>\n                <button className=\"btn\" style={{ color: color, borderColor: border }} onClick={moveClicked}>\n                    {text}\n                </button>\n            </td>\n        );\n        // end of round\n        if (i !== 0 && i % 2 === 1) {\n            history.push(\n                <tr key={roundNum}>\n                    <th key={roundNum + 'w'} scope=\"row\">{roundNum++}</th>\n                    {round}\n                </tr>\n            );\n            round = [];\n        }\n    }\n\n    if (round.length > 0) {\n        history.push(\n            <tr key={roundNum}>\n                <th scope=\"row\">{roundNum}</th>\n                {round}\n                <td></td>\n            </tr>\n        );\n    }\n\n    return (\n        <table id=\"history-table\" className=\"table table-borderless table-bordered\" style={{ maxHeight: 'inherit' }}>\n            <thead>\n                <tr>\n                    <th scope=\"col\">#</th>\n                    <th scope=\"col\">White</th>\n                    <th scope=\"col\">Black</th>\n                </tr>\n            </thead>\n            <tbody>\n                {history}\n            </tbody>\n        </table>\n    );\n}\n\n\nexport default MoveHistory;\n"]},"metadata":{},"sourceType":"module"}