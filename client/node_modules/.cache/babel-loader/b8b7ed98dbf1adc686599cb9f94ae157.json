{"ast":null,"code":"/**\n * This datastructure represents a table. What is special about\n * this table is that it mimics the structure of a single array;\n * Elements are inserted 'from left to right' and after the maximum\n * number of elements in a row has been reached, a new row is created.\n * Since all rows have the same length, each 'empty' element in a row\n * is set to null.\n * \n * Example: The array [1, 2, 3, 4, 5, 6] where the number of columns is\n * 2 is transformed into the following matrix: [ [1, 2][3, 4][5, 6] ].\n * After inserting the element '7', it becomes: [ [1, 2][3, 4][5, 6][7, null] ].\n */\nexport default class LinearTable {\n  /** This is the matrix that represents the table */\n\n  /** This is the maximum number of columns. DO NOT CHANGE THIS. */\n\n  /**\n   * Constructs a linear table.\n   * @param columns The maximum number of columns (positive nonzero integer)\n   * @param data Optional data to initialize the table with\n   */\n  constructor(columns, _data) {\n    this.matrix = [];\n    this.columns = void 0;\n\n    this.totalItems = () => {\n      const lastColumn = this.matrix[this.matrix.length - 1];\n      let i = 0;\n\n      for (let item of lastColumn) {\n        if (item !== null) i++;\n      }\n\n      return (this.matrix.length - 1) * this.columns + i;\n    };\n\n    this.lastIndex = () => {\n      const y = this.matrix.length - 1;\n\n      for (let x = 0; x < this.columns; x++) {\n        if (this.matrix[y][x] === null) return [y, x - 1];\n      }\n\n      return [y, this.columns - 1];\n    };\n\n    this.get = (column, row) => {\n      if (this.matrix.length === 0) return null;\n      return this.matrix[column][row];\n    };\n\n    this.push = data => {\n      if (this.matrix.length === 0) {\n        const tmp = Array(this.columns).fill(null);\n        tmp[0] = data;\n        this.matrix.push(tmp);\n        return;\n      }\n\n      const lastRow = this.matrix[this.matrix.length - 1];\n\n      for (let i = 0; i < this.columns; i++) {\n        if (lastRow[i] === null) {\n          lastRow[i] = data;\n          return;\n        }\n      }\n\n      const tmp = Array(this.columns).fill(null);\n      tmp[0] = data;\n      this.matrix.push(tmp);\n    };\n\n    this.pushAll = data => {\n      for (let t of data) this.push(t);\n    };\n\n    this.columns = columns;\n    if (_data !== undefined) this.pushAll(_data);\n  }\n  /**\n   * Counts the total number of items in this table.\n   * All 'empty' (null) elements are not counted.\n   * @returns The total number of items in the table\n   */\n\n\n}","map":{"version":3,"sources":["/home/mario/Desktop/ChessLion/client/src/utils/data/linearTable.ts"],"names":["LinearTable","constructor","columns","data","matrix","totalItems","lastColumn","length","i","item","lastIndex","y","x","get","column","row","push","tmp","Array","fill","lastRow","pushAll","t","undefined"],"mappings":"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","sourcesContent":["/**\n * This datastructure represents a table. What is special about\n * this table is that it mimics the structure of a single array;\n * Elements are inserted 'from left to right' and after the maximum\n * number of elements in a row has been reached, a new row is created.\n * Since all rows have the same length, each 'empty' element in a row\n * is set to null.\n * \n * Example: The array [1, 2, 3, 4, 5, 6] where the number of columns is\n * 2 is transformed into the following matrix: [ [1, 2][3, 4][5, 6] ].\n * After inserting the element '7', it becomes: [ [1, 2][3, 4][5, 6][7, null] ].\n */\nexport default class LinearTable<T> {\n    /** This is the matrix that represents the table */\n    matrix: Array< Array<T | null> > = [];\n    /** This is the maximum number of columns. DO NOT CHANGE THIS. */\n    columns!: number;\n\n    /**\n     * Constructs a linear table.\n     * @param columns The maximum number of columns (positive nonzero integer)\n     * @param data Optional data to initialize the table with\n     */\n    constructor(columns: number, data?: Array<T | null>) {\n        this.columns = columns;\n        if (data !== undefined)\n            this.pushAll(data);\n    }\n\n    /**\n     * Counts the total number of items in this table.\n     * All 'empty' (null) elements are not counted.\n     * @returns The total number of items in the table\n     */\n    totalItems = (): number => {\n        const lastColumn = this.matrix[this.matrix.length-1];\n        let i = 0;\n        for (let item of lastColumn) {\n            if (item !== null) i++;\n        }\n        return (this.matrix.length - 1) * this.columns + i;\n    }\n\n    /**\n     * Retrieves the index of the last non-null element.\n     * @returns [last column, last row]\n     */\n    lastIndex = (): [number, number] => {\n        const y = this.matrix.length - 1;\n        for (let x=0; x<this.columns; x++) {\n            if (this.matrix[y][x] === null)\n                return [y, x - 1]\n        }\n        return [y, this.columns - 1];\n    }\n\n    /**\n     * Retrieves the element at the given position in the table.\n     * @param column The column\n     * @param row The row\n     * @returns The element at the given position\n     */\n    get = (column: number, row: number): T | null => {\n        if (this.matrix.length === 0)\n            return null;\n        return this.matrix[column][row];\n    }\n\n    /**\n     * Appends the given element to this table. The time complexity is\n     * linear.\n     * @param data The element to insert\n     */\n    push = (data: T | null): void => {\n        if (this.matrix.length === 0) {\n            const tmp = Array<T | null>(this.columns).fill(null);\n            tmp[0] = data;\n            this.matrix.push(tmp);\n            return;\n        }\n        const lastRow = this.matrix[this.matrix.length-1];\n        for (let i=0; i<this.columns; i++) {\n            if (lastRow[i] === null) {\n                lastRow[i] = data;\n                return;\n            }\n        }\n        const tmp = Array<T | null>(this.columns).fill(null);\n        tmp[0] = data;\n        this.matrix.push(tmp);\n    }\n\n    /**\n     * Appends all the given data to this table. The time complexity\n     * is linear.\n     * @param data The elements to insert\n     */\n    pushAll = (data: Array<T | null>): void => {\n        for (let t of data)\n            this.push(t);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}